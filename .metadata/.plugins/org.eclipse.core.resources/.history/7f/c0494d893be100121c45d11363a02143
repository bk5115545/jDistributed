
public class Main {

	private static final Processor[] processors = new Processor[4];
	
	public static void main(String[] args) {
		for(int i=0; i <processors.length; i++) {
			processors[i] = new Processor(2);
			//processors[i].start();
		}
		for(int i=0; i<100000; i++) {
			allocateProgram(new Program(TestFile.class));
		}
		
		for(int i=0; i <processors.length; i++) {
			//processors[i] = new Processor(2);
			processors[i].start();
		}
		
		

		Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
			public void run() {
				for(int i=0; i<processors.length; i++) {
					while(processors[i].jobs.size() > 0) try {
						Thread.currentThread().sleep(100);
					} catch (InterruptedException e) { 
						System.out.println("Processor shutdown interrupted"); 
					}
				}
			}
		}));
		
		System.exit(0);
	}
	
	/**
	 * Allocates a given program to the least busy processor.  Heavily optimized.
	 * @param p
	 * @return The allocated Processor
	 */
	public static Processor allocateProgram(Program p) {
		Processor p2 = processors[0];
		if(p2.jobs.size() == 0) {
			p2.jobs.add(p);
			return p2;
		}
		for(int i=1; i<processors.length; i++) {
			if(processors[i].jobs.size() < p2.jobs.size()) p2 = processors[i];
		}
		p2.jobs.add(p);
		return p2;
	}

}
